@using System.Collections;
@{
    ViewBag.Title = "FormWizard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Styles.Render("~/frest/css/commonPage")
@Styles.Render("~/frest/css/wizard")
@Scripts.Render("~/frest/js/commonPage")
@Scripts.Render("~/frest/js/wizard")

<div class="app-content content">
    <div class="content-overlay"></div>
    <!-- Content Wrapper. Contains page content -->
    <div class="content-wrapper">
        <!-- Content Header (Page header) -->
        <section class="content-header row">
            <div class="content-header-left col-12 mb-2 mt-1">
                <div class="breadcrumbs-top">
                    <h5 class="content-header-title float-left pr-1 mb-0">FormWizard</h5>
                </div>
            </div>
        </section>
        <!-- Main content -->
        <section class="content-body">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body" id="wizardBody" style="display:none">
                        <form class="wizard-vertical" method="post" onsubmit="return false">
                            <!-- Step 1 -->
                            <h3>
                                <span class="fonticon-wrap mr-1">
                                    <i id="livStep1" class="livicon-evo" data-options="name:morph-checkbox-1.svg; size: 50px; strokeColor:#adb5bd; eventType:none"></i>
                                </span>
                                <span class="icon-title">
                                    <span class="d-block">STEP 1</span>
                                    <small class="text-muted">select2 를 이용한 드롭다운 선택 Step1</small>
                                </span>
                            </h3>
                            <!-- Step 1 -->
                            <!-- body content of step 1 -->
                            <fieldset class="pt-0">
                                <div style="display:flex;">
                                    <div class="mr-2" style="margin-top:2px;">
                                        <h6>라디오 버튼 선택에 따른 이벤트 제어</h6>
                                    </div>
                                    <div class="radio radio-primary radio-glow mb-2 mr-1">
                                        <input name="testType" class="form-check-input" type="radio" value="type1" id="rdType1" checked>
                                        <label class="form-check-label" for="rdType1" style="font-size:medium">Type1</label>
                                    </div>
                                    <div class="radio radio-primary radio-glow mb-2">
                                        <input name="testType" class="form-check-input" type="radio" value="type2" id="rdType2">
                                        <label class="form-check-label" for="rdType2" style="font-size:medium">Type2</label>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="test1" style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; width:100%;">테스트 항목1</label>
                                            <input class="form-control required" id="test1" name="test1" style="width:100%;">
                                        </div>
                                        <div class="form-group">
                                            <label for="test3" style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; width:100%;">테스트 항목3</label>
                                            <input class="form-control" id="test3" name="test3" style="width:100%;">
                                        </div>
                                        <div class="form-group">
                                            <label for="test5" style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; width:100%;">테스트 항목5</label>
                                            <input class="form-control" id="test5" name="test5" style="width:100%;">
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="test2" id="test2Info" style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; width:100%;">테스트 항목2</label>
                                            <select class="custom-select form-control required" id="test2" name="test2" style="width:100%;">
                                            </select>
                                        </div>
                                        <div class="form-group">
                                            <label for="test4" id="test4Info" style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; width:100%;">테스트 항목4</label>
                                            <select class="custom-select form-control" id="test4" name="test4" style="width:100%;">
                                            </select>
                                        </div>
                                        <div class="form-group">
                                            <label for="test6" id="test6Info" style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; width:100%;">테스트 항목6</label>
                                            <select class="custom-select form-control" id="test6" name="test6" style="width:100%;">
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                            <!-- body content of step 1 end -->
                            <!-- Step 2 -->
                            <h3>
                                <span class="fonticon-wrap mr-1">
                                    <i id="livStep2" class="livicon-evo" data-options="name:morph-checkbox-1.svg; size: 50px; strokeColor:#adb5bd; eventType:none"></i>
                                </span>
                                <span class="icon-title">
                                    <span class="d-block">대상자 선택</span>
                                    <small class="text-muted">대상자를 선택하세요.</small>
                                </span>
                            </h3>
                            <!-- step 2 -->
                            <!-- body content of step 2 end -->
                            <fieldset class="pt-0">
                                <h6 class="pb-50">대상자 선택</h6>
                                <div class="row">
                                    <div id="pUserGrid" style="min-height:300px; margin-bottom:2%; overflow-x:auto;"></div>
                                </div>
                            </fieldset>
                            <!-- body content of step 2 end -->
                        </form>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>
<div class="loadingBar"></div>
@section Scripts
{
    <script type="text/javascript">

        fnInit();
        fnEvent();

        //js doucument ready
        document.addEventListener("DOMContentLoaded", function(){
            fnLast();
        });

        function fnInit() {
            //wizard 기능
            fnWizardSetting();
            //formwiazrd 형태가 다 만들어진 후 보여주기 위해
            $("#wizardBody").css("display", "block");
        }

        //wizard 기능 설정
        function fnWizardSetting() {
            let stepsValidation = $(".wizard-vertical");
            let form = stepsValidation.show();

            stepsValidation.steps({
                headerTag: "h3",
                bodyTag: "fieldset",
                transitionEffect: "fade",
                enableAllSteps: true,
                stepsOrientation: "vertical",
                labels: {
                    finish: 'Finish'
                },
                onStepChanging: function (event, currentIndex, newIndex) {
                    if (currentIndex == 1) {
                        //현재 index가 새로운 index보다 크면 이전으로 돌아가는경우임
                        if (currentIndex > newIndex) {
                            //스탭별 라이브아이콘 제어 S
                                $("#livStep1").updateLiviconEvo({
                                    name: 'morph-checkbox-1'
                                    , autoPlay: true
                                    , morphState: 'end'
                                });
                            //스탭별 라이브아이콘 제어 E
                            form.validate().settings.ignore = ":disabled,:hidden";
                            return form.valid();
                        }
                    } else if (currentIndex == 2) {
                        //스탭별 라이브아이콘 제어 S
                            $("#livStep2").updateLiviconEvo({
                                name: 'morph-checkbox-1'
                                , autoPlay: true
                                , morphState: 'end'
                            });
                        //스탭별 라이브아이콘 제어 E
                    }

                    if (newIndex == 1) {
                        //스탭별 라이브아이콘 제어 S
                            $("#livStep1").updateLiviconEvo({
                                name: 'morph-checkbox-1'
                                , autoPlay: true
                                , morphState: 'start'
                            });
                        //스탭별 라이브아이콘 제어 E

                        //현재 index가 새로운 index보다 크면 이전으로 돌아가는경우임
                        if (currentIndex < newIndex) {
                            fnUserGrid(); //대상자 그리드 draw
                            fnModalTestUserEvent("M_TestUserSearch"); //사용자 검색 모달 이벤트 메서드 실행
                        }

                        form.validate().settings.ignore = ":disabled,:hidden";
                        return form.valid();
                    }
                    //else if (newIndex == 2) {
                    //    let grid = $("#pUserGrid").data("kendoGrid");
                    //    let rowLen = grid.tbody[0].rows.length;

                    //    //대상자 추가 체크
                    //    if (rowLen > 0) {
                    //        //스탭별 라이브아이콘 제어 S
                    //            $("#livStep2").updateLiviconEvo({
                    //                name: 'morph-checkbox-1'
                    //                , autoPlay: true
                    //                , morphState: 'start'
                    //            });
                    //        //스탭별 라이브아이콘 제어 E

                    //        // Allways allow previous action even if the current form is not valid!
                    //        if (currentIndex > newIndex) {
                    //            return true;
                    //        }
                    //        fnVmCreateGridSet(grid); //VM생성 그리드
                    //        form.validate().settings.ignore = ":disabled,:hidden";
                    //        return form.valid();
                    //    } else {
                    //        ComJS.fnSweetAlert(`대상자가 없습니다.\n 대상자 추가 후 진행해주세요.`);
                    //    }
                    //}
                },
                onFinishing: function (event, currentIndex) {
                    let grid = $("#pUserGrid").data("kendoGrid");

                    let rowData = [];
                    let data = grid._data;
                    $(grid.tbody[0].rows).each(function () {
                        rowData.push(JSON.stringify(data[this.rowIndex])); //선택한 컬럼의 row의 data
                    });

                    if (rowData.length > 0) {
                        $(".wizard-vertical").steps("destroy");
                        fnWizardSetting();
                        $(".select2").remove();//selec2 삭제..
                        fnDDSearch();
                    } else {
                        ComJS.fnSweetAlert(`대상자가 없습니다.\n 대상자 추가 후 진행해주세요.`);
                        return false;
                    }
                }
            });

            // Initialize validation
            stepsValidation.validate({
                ignore: 'input[type=hidden]', // ignore hidden fields
                errorClass: 'danger',
                successClass: 'success',
                highlight: function (element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                unhighlight: function (element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                errorPlacement: function (error, element) {
                    error.insertAfter(element);
                }
            });

            // add primary btn class
            $('.actions a[role="menuitem"]').addClass("btn btn-primary");
            $('.icon-tab [role="menuitem"]').addClass("glow ");
            $('.wizard-vertical [role="menuitem"]').removeClass("btn-primary").addClass("btn-light-primary");
        }

        function fnEvent() {
            //테스트 타입에 따른 이벤트 설정
            document.getElementsByName("testType").forEach(radio => radio.addEventListener("change", e => {
                fnDDSearch();
            }));
        }

        function fnLast() {

            //드롭다운 세팅
            fnDDSearch();

            //wizard 레이아웃 사이즈 변경
            document.querySelector(".wizard-vertical .steps").style.width = "25%";
            document.querySelector(".wizard-vertical .content").style.width = "75%";

        }

        function fnDDSearch() {
            fnDDTest2();
            fnDDTest4();
            fnDDTest6();
        }

        @* 드롭다운 test2 *@
        function fnDDTest2() {
            let data = [
                {
                    NM_DD: "테스트2-1"
                  , VAL_DD: "1"
                }
                , {
                    NM_DD: "테스트2-2"
                    , VAL_DD: "type2"
                }
                , {
                    NM_DD: "테스트2-3"
                    , VAL_DD: "type1"
                }
            ]

            ComJS.fnDataKeyRedefine("DD", data);

            @* testType 체크에 따라 조회 된 값 필터하기 *@
            let filterData = data.filter(function (e) {
                let testType = document.getElementsByName("testType");
                let selected = Array.from(testType).find(radio => radio.checked);
                return e.VAL_DD !== selected.value;
            });

            @* 초기화 *@
            $("#test2").empty();
            $("#test2").select2({
                data: filterData
            });

            $("#test2Info").text("test2Info : " + filterData[0].VAL_DD);

            @* 초기값 세팅 *@
            //$("#test2").val("").trigger('change');

            $("#test2").on('select2:select', function (e) {
                $("#test2Info").text("test2Info : " + e.params.data.VAL_DD);
            });
        }

        @* 드롭다운 test4 *@
        function fnDDTest4() {

            let data = [
                {
                    NM_DD: "테스트4-1"
                    , VAL_DD: "1"
                }
                , {
                    NM_DD: "테스트4-2"
                    , VAL_DD: "type1"
                }
                , {
                    NM_DD: "테스트4-3"
                    , VAL_DD: "type2"
                }
            ]

            ComJS.fnDataKeyRedefine("DD", data);

            @* testType 체크에 따라 조회 된 값 필터하기 *@
            let filterData = data.filter(function (e) {
                let testType = document.getElementsByName("testType");
                let selected = Array.from(testType).find(radio => radio.checked);
                return e.VAL_DD !== selected.value;
            });

            @* 초기화 *@
            $("#test4").empty();
            $("#test4").select2({
                data: filterData
            });

            $("#test4Info").text("test4Info : " + filterData[0].VAL_DD);

            @* 초기값 세팅 *@
            //$("#test4").val("").trigger('change');

            $("#test4").on('select2:select', function (e) {
                $("#test4Info").text("test4Info : " + e.params.data.VAL_DD);

                @* 체인형태 test4에 값에 따라 test6 변경 *@
                if ("1" == e.params.data.VAL_DD) {
                    $("#test6").val("2").trigger('change');
                    $("#test6Info").text("test6Info : " + "2");
                }
            });
        }

        @* 드롭다운 test6 *@
        function fnDDTest6() {
            let data = [
                {
                    NM_DD: "테스트6-1"
                    , VAL_DD: "type1"
                }
                , {
                    NM_DD: "테스트6-2"
                    , VAL_DD: "2"
                }
                , {
                    NM_DD: "테스트6-3"
                    , VAL_DD: "type2"
                }
            ]

            ComJS.fnDataKeyRedefine("DD", data);

            @* testType 체크에 따라 조회 된 값 필터하기 *@
            let filterData = data.filter(function (e) {
                let testType = document.getElementsByName("testType");
                let selected = Array.from(testType).find(radio => radio.checked);
                return e.VAL_DD !== selected.value;
            });

                @* 초기화 *@
            $("#test6").empty();
            $("#test6").select2({
                data: filterData
            });

            $("#test6Info").text("test6Info : " + filterData[0].VAL_DD);

                @* 초기값 세팅 *@
            //$("#test2").val("").trigger('change');

            $("#test6").on('select2:select', function (e) {
                $("#test6Info").text("test6Info : " + e.params.data.VAL_DD);
            });
        }

        //VM 대상자 그리드
        function fnUserGrid(result) {

            //그리드 정보 데이터 세팅
            let data = result != null ? result.data : result;

            let columns = [];
            let checkBox = {
                headerAttributes: { style: "text-align:center;" },
                attributes: { style: "text-align:center;" },
                headerTemplate: "<input type='checkbox' id='CB_ALL' style='width:20px; height:20px;'>",
                template: function () {
                    return "<input type='checkbox' id='CB' style='width:20px; height:20px;'>";
                },
                width: 30
            }

            columns.push(checkBox);

            let cols = [
                { field: "EMP_NO", headerAttributes: { style: "text-align: center;" }, attributes: { style: "text-align: center; white-space : nowrap;" }, title: "사번", width: "100px" },
                { field: "EMP_NM", headerAttributes: { style: "text-align: center;" }, attributes: { style: "text-align: center; white-space : nowrap;" }, title: "사용자명", width: "100px" },
                { field: "DEPT_CD", hidden: true },
                { field: "DEPT_NM", headerAttributes: { style: "text-align: center;" }, attributes: { style: "text-align: center; white-space : nowrap;" }, title: "부서명", width: "100px" }
            ]

            columns = $.merge(columns, cols);

            let nonReordableColumn; //체크박스 영역 담는 변수

            //그리드를 empty하면 기존 관련 이벤트들이 모두 사라짐
            //toolbar 버튼은 다른 cshtml에서 이벤트를 걸기 때문에 페이지 실행시 1회만 적용됨
            //이런 부분을 보완하기위해 그리드가 empty되기전에 detach라는 기능을 사용하여 기존toolbar 이벤트를 담아두고
            //그리드를 새로 다시 그린 후 추가 하는 방식
            //detach는 기존 이벤트 정보까지 모두 가진상태로 삭제함 2021.07.07. 강승호
            let toolbarDetach;
            if ($("#pUserGrid").data("kendoGrid") != null) { //데이터 없이 그려질 경우 toolbarDetach에 넣지 않아도됨
                toolbarDetach = $("#pUserGrid").children(".k-toolbar").detach();
            }

            $("#pUserGrid").empty(); //그리드 초기화를 안해주면 해당 그리드에 계속 추가되어 페이징에서 스크립트 오류가 뜸
            let grid = $("#pUserGrid").kendoGrid({
                toolbar: [
                    { name: "add", iconClass: "k-icon", text: "" }   //그리드 데이터 추가 기능 (추가버튼영역 한개와 연결)
                    , { name: "delete", iconClass: "k-icon", text: "" }   //그리드 row 삭제기능                    
                ],
                dataSource: {
                    data: data,
                    pageSize: 1000
                },
                noRecords: {
                    template: "Please search."
                },
                autoWidth: true,
                sortable: true,
                resizable: true,
                reorderable: true,
                height: 350,
                dataBound: function (e) {

                    //toolbar 툴팁 설정
                    this.element.find(".k-grid-add").attr("title", "Grid Data Add");
                    this.element.find(".k-grid-delete").attr("title", "Grid Data Delete");

                    //타이틀 클릭 시 정렬 이벤트
                    $(this.thead.find("tr th")).on("click", function (e) {
                        //전체선택 체크 박스 컬럼 제외
                        if ($(this).find("input").length > 0) {
                            //전체선택 체크박스가 있으면
                            if ($(this).find("input")[0].id == "CB_ALL") {
                                fnUserGridAllCheck(this);
                            } else {
                            }
                        } else {

                        }
                    });

                    //그리드 삭제기능
                    this.element.find(".k-grid-delete").off("click").on("click", function () {
                        let rows = grid.tbody.find("tr");
                        if (rows.length > 0) {
                            for (let i = 0; i < rows.length; i++) {
                                let check = rows[i].querySelector("input");
                                if (check.checked) {
                                    grid.removeRow(rows[i]);
                                }
                            }
                        }
                        grid.element.find("#CB_ALL").prop("checked", false); //전체 체크박스 초기화
                    });                    

                    //체크박스 영역 담기
                    nonReordableColumn = e.sender.columns[0];

                },
                columns: columns,
                columnReorder: function (e) {
                    setTimeout(function (e) {
                        grid.reorderColumn(0, nonReordableColumn); //체크 박스 영역을 움직일 시 다시 되돌리기
                    }, 1)
                }
            }).data("kendoGrid");

            //fillter 중 datepicker 타입의 format을 정의해줌
            $("#" + grid.element[0].id + " [data-role=datepicker]").kendoDatePicker({
                format: "yyyy-MM-dd"
            });

            //그리드 td 툴팁
            grid.table.kendoTooltip({
                filter: "td",
                content: function (e) {
                    let target = e.target; // element for which the tooltip is shown
                    return $(target).text();
                }
            });

            //데이터없이 그려진 이후 부터 그리드를 다시 그릴 시 툴바를 다시 넣어준다
            if (toolbarDetach != null) {
                $("#" + grid.element[0].id + " .k-grid-toolbar").remove();
                $("#" + grid.element[0].id + " .k-grid-header").before(toolbarDetach);
            }

            setTimeout(function (e) {
                grid.resize();
            }, 250)
        }

        //그리드 전체체크박스 함수
        function fnUserGridAllCheck(cbData) {
            let grid = $("#pUserGrid").data("kendoGrid");

            if ($(cbData).find("input").is(":checked")) {
                $(grid.tbody[0].rows).find("input").prop("checked", true); // 전체선택
            } else {
                $(grid.tbody[0].rows).find("input").prop("checked", false); //전체 선택해제
            }
        }        
    </script>
}

@Html.Partial("~/Views/Modal/Common/TestUserSearch.cshtml")